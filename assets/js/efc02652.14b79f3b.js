"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7261],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return h}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return a?n.createElement(m,s(s({ref:t},p),{},{components:a})):n.createElement(m,s({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4455:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(7294),r=a(6010),o="tabItem_Ymn6",s=Object.defineProperty,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,t,a)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;function u({children:e,hidden:t,className:a}){return n.createElement("div",((e,t)=>{for(var a in t||(t={}))l.call(t,a)&&p(e,a,t[a]);if(i)for(var a of i(t))c.call(t,a)&&p(e,a,t[a]);return e})({role:"tabpanel",className:(0,r.Z)(o,a)},{hidden:t}),e)}},5332:function(e,t,a){a.d(t,{Z:function(){return w}});var n=a(7294),r=a(6010),o=a(4939),s=a(2174),i=a(2107),l=a(8757),c="tabList__CuJ",p="tabItem_LNqP",u=Object.defineProperty,d=Object.defineProperties,h=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable,b=(e,t,a)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,y=(e,t)=>{for(var a in t||(t={}))g.call(t,a)&&b(e,a,t[a]);if(m)for(var a of m(t))f.call(t,a)&&b(e,a,t[a]);return e};function v(e){var t,a;const{lazy:o,block:u,defaultValue:m,values:g,groupId:f,className:b}=e,v=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=null!=g?g:v.map((({props:{value:e,label:t,attributes:a}})=>({value:e,label:t,attributes:a}))),k=(0,s.l)(w,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const x=null===m?m:null!=(a=null!=m?m:null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)?a:v[0].props.value;if(null!==x&&!w.some((e=>e.value===x)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${x}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:O}=(0,i.U)(),[j,P]=(0,n.useState)(x),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,l.o5)();if(null!=f){const e=N[f];null!=e&&e!==j&&w.some((t=>t.value===e))&&P(e)}const C=e=>{const t=e.currentTarget,a=T.indexOf(t),n=w[a].value;n!==j&&(E(t),P(n),null!=f&&O(f,String(n)))},S=e=>{var t,a;let n=null;switch(e.key){case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;n=null!=(t=T[a])?t:T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=null!=(a=T[t])?a:T[T.length-1];break}}null==n||n.focus()};return n.createElement("div",{className:(0,r.Z)("tabs-container",c)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},b)},w.map((({value:e,label:t,attributes:a})=>{return n.createElement("li",(o=y({role:"tab",tabIndex:j===e?0:-1,"aria-selected":j===e,key:e,ref:e=>T.push(e),onKeyDown:S,onFocus:C,onClick:C},a),s={className:(0,r.Z)("tabs__item",p,null==a?void 0:a.className,{"tabs__item--active":j===e})},d(o,h(s))),null!=t?t:e);var o,s}))),o?(0,n.cloneElement)(v.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))}function w(e){const t=(0,o.Z)();return n.createElement(v,y({key:String(t)},e))}},4903:function(e,t,a){a.r(t),a.d(t,{assets:function(){return b},contentTitle:function(){return g},default:function(){return w},frontMatter:function(){return m},metadata:function(){return f},toc:function(){return y}});var n=a(3905),r=a(5332),o=a(4455),s=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?s(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,h=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&d(e,a,t[a]);if(c)for(var a of c(t))u.call(t,a)&&d(e,a,t[a]);return e};const m={id:"writing-tests",title:"Writing Tests"},g=void 0,f={unversionedId:"writing-tests",id:"version-stable/writing-tests",title:"Writing Tests",description:"Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Playwright comes with auto-wait built in meaning it waits for elements to be actionable prior to performing actions. Playwright provides a test function to declare tests and the expect function to write assertions.",source:"@site/versioned_docs/version-stable/writing-tests.mdx",sourceDirName:".",slug:"/writing-tests",permalink:"/docs/writing-tests",draft:!1,tags:[],version:"stable",frontMatter:{id:"writing-tests",title:"Writing Tests"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/intro"},next:{title:"Running Tests",permalink:"/docs/running-tests"}},b={},y=[{value:"Assertions",id:"assertions",level:3},{value:"Locators",id:"locators",level:3},{value:"Test Isolation",id:"test-isolation",level:3},{value:"Using Test Hooks",id:"using-test-hooks",level:3},{value:"What&#39;s Next",id:"whats-next",level:2}],v={toc:y};function w(e){var t,a=e,{components:s}=a,d=((e,t)=>{var a={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&c)for(var n of c(e))t.indexOf(n)<0&&u.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=h(h({},v),d),i(t,l({components:s,mdxType:"MDXLayout"}))),(0,n.kt)("p",null,"Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Playwright comes with ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/actionability"}),"auto-wait")," built in meaning it waits for elements to be actionable prior to performing actions. Playwright provides a ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/api/class-test"}),"test")," function to declare tests and the ",(0,n.kt)("a",h({parentName:"p"},{href:"https://jestjs.io/docs/expect"}),"expect")," function to write assertions."),(0,n.kt)("p",null,"Take a look at the example test included when installing Playwright to see how to write a test using web first assertions, locators and selectors."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),"import { test, expect } from '@playwright/test';\n\ntest('homepage has Playwright in title and get started link linking to the intro page', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n\n  // create a locator\n  const getStarted = page.locator('text=Get Started');\n\n  // Expect an attribute \"to be strictly equal\" to the value.\n  await expect(getStarted).toHaveAttribute('href', '/docs/intro');\n\n  // Click the get started link.\n  await getStarted.click();\n\n  // Expects the URL to contain intro.\n  await expect(page).toHaveURL(/.*intro/);\n});\n"))),(0,n.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),"// @ts-check\nconst { test, expect } = require('@playwright/test');\n\ntest('homepage has Playwright in title and get started link linking to the intro page', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n\n  // create a locator\n  const getStarted = page.locator('text=Get Started');\n\n  // Expect an attribute \"to be strictly equal\" to the value.\n  await expect(getStarted).toHaveAttribute('href', '/docs/intro');\n\n  // Click the get started link.\n  await getStarted.click();\n \n  // Expects the URL to contain intro.\n  await expect(page).toHaveURL(/.*intro/);\n});\n")))),(0,n.kt)("admonition",h({},{type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Add ",(0,n.kt)("inlineCode",{parentName:"p"},"// @ts-check")," at the start of each test file when using JavaScript in VS Code to get automatic type checking.")),(0,n.kt)("h3",h({},{id:"assertions"}),"Assertions"),(0,n.kt)("p",null,"Playwright Test uses the ",(0,n.kt)("a",h({parentName:"p"},{href:"https://jestjs.io/docs/expect"}),"expect")," library for ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/test-assertions"}),"test assertions")," which provides matchers like ",(0,n.kt)("inlineCode",{parentName:"p"},"toEqual"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"toContain"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"toMatch"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"toBe")," and many more. Playwright also extends this library with convenience async matchers that will wait until the expected condition is met."),(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),"await expect(page).toHaveTitle(/Playwright/);\n")),(0,n.kt)("h3",h({},{id:"locators"}),"Locators"),(0,n.kt)("p",null,(0,n.kt)("a",h({parentName:"p"},{href:"/docs/locators"}),"Locators")," are the central piece of Playwright's auto-waiting and retry-ability. Locators represent a way to find element(s) on the page at any moment and are used to perform actions on elements such as ",(0,n.kt)("inlineCode",{parentName:"p"},".click")," ",(0,n.kt)("inlineCode",{parentName:"p"},".fill")," etc. Custom locators can be created with the ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/api/class-page#page-locator"}),"page.locator(selector[, options])")," method."),(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),"const getStarted = page.locator('text=Get Started');\n\nawait expect(getStarted).toHaveAttribute('href', '/docs/installation');\nawait getStarted.click();\n")),(0,n.kt)("p",null,(0,n.kt)("a",h({parentName:"p"},{href:"/docs/selectors"}),"Selectors")," are strings that are used to create Locators. Playwright supports many different selectors like ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/selectors#text-selector"}),"Text"),", ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/selectors#css-selector"}),"CSS"),", ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/selectors#xpath-selectors"}),"XPath")," and many more. Learn more about available selectors and how to pick one in this ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/selectors"}),"in-depth guide"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),"await expect(page.locator('text=Installation')).toBeVisible();\n")),(0,n.kt)("h3",h({},{id:"test-isolation"}),"Test Isolation"),(0,n.kt)("p",null,"Playwright Test is based on the concept of ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/test-fixtures"}),"test fixtures")," such as the ",(0,n.kt)("a",h({parentName:"p"},{href:"./test-fixtures#built-in-fixtures"}),"built in page fixture"),", which is passed into your test. Pages are isolated between tests due to the Browser Context, which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser."),(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),"test('basic test', async ({ page }) => {\n  ...\n")),(0,n.kt)("h3",h({},{id:"using-test-hooks"}),"Using Test Hooks"),(0,n.kt)("p",null,"You can use various ",(0,n.kt)("a",h({parentName:"p"},{href:"/docs/api/class-test"}),"test hooks")," such as ",(0,n.kt)("inlineCode",{parentName:"p"},"test.describe")," to declare a group of tests and ",(0,n.kt)("inlineCode",{parentName:"p"},"test.beforeEach")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"test.afterEach")," which are executed before/after each test. Other hooks include the ",(0,n.kt)("inlineCode",{parentName:"p"},"test.beforeAll")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"test.afterAll")," which are executed once per worker before/after all tests."),(0,n.kt)(r.Z,{groupId:"js-flavor",defaultValue:"ts",values:[{label:"TypeScript",value:"ts"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"ts",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),'import { test, expect } from "@playwright/test";\n\ntest.describe("navigation", () => {\n  test.beforeEach(async ({ page }) => {\n    // Go to the starting url before each test.\n    await page.goto("https://playwright.dev/");\n  });\n\n  test("main navigation", async ({ page }) => {\n    // Assertions use the expect API.\n    await expect(page).toHaveURL("https://playwright.dev/");\n  });\n});\n'))),(0,n.kt)(o.Z,{value:"js",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",h({parentName:"pre"},{className:"language-js"}),'// @ts-check\nconst { test, expect } = require("@playwright/test");\n\ntest.describe("navigation", () => {\n  test.beforeEach(async ({ page }) => {\n    // Go to the starting url before each test.\n    await page.goto("https://playwright.dev/");\n  });\n\n  test("main navigation", async ({ page }) => {\n    // Assertions use the expect API.\n    await expect(page).toHaveURL("https://playwright.dev/");\n  });\n});\n')))),(0,n.kt)("h2",h({},{id:"whats-next"}),"What's Next"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",h({parentName:"li"},{href:"/docs/running-tests"}),"Run single tests, multiple tests, headed mode")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",h({parentName:"li"},{href:"/docs/debug"}),"Debug tests with the Playwright Debugger")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",h({parentName:"li"},{href:"/docs/codegen"}),"Generate tests with Codegen")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",h({parentName:"li"},{href:"/docs/trace-viewer"}),"See a trace of your tests"))))}w.isMDXComponent=!0}}]);