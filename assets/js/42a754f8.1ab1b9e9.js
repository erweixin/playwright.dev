"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7304],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?o.createElement(f,s(s({ref:n},l),{},{components:t})):o.createElement(f,s({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=t[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5262:function(e,n,t){t.r(n),t.d(n,{assets:function(){return x},contentTitle:function(){return m},default:function(){return b},frontMatter:function(){return d},metadata:function(){return f},toc:function(){return g}});var o=t(3905),r=Object.defineProperty,a=Object.defineProperties,s=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,l=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))c.call(n,t)&&l(e,t,n[t]);if(i)for(var t of i(n))p.call(n,t)&&l(e,t,n[t]);return e};const d={id:"chrome-extensions",title:"Chrome Extensions"},m=void 0,f={unversionedId:"chrome-extensions",id:"version-stable/chrome-extensions",title:"Chrome Extensions",description:"Extensions only work in Chrome / Chromium in non-headless mode, launched with a persistent context.",source:"@site/versioned_docs/version-stable/chrome-extensions.mdx",sourceDirName:".",slug:"/chrome-extensions",permalink:"/docs/chrome-extensions",draft:!1,tags:[],version:"stable",frontMatter:{id:"chrome-extensions",title:"Chrome Extensions"},sidebar:"docs",previous:{title:"Browser Contexts",permalink:"/docs/browser-contexts"},next:{title:"Command line tools",permalink:"/docs/cli"}},x={},g=[{value:"Testing",id:"testing",level:2}],h={toc:g};function b(e){var n,t=e,{components:r}=t,l=((e,n)=>{var t={};for(var o in e)c.call(e,o)&&n.indexOf(o)<0&&(t[o]=e[o]);if(null!=e&&i)for(var o of i(e))n.indexOf(o)<0&&p.call(e,o)&&(t[o]=e[o]);return t})(t,["components"]);return(0,o.kt)("wrapper",(n=u(u({},h),l),a(n,s({components:r,mdxType:"MDXLayout"}))),(0,o.kt)("admonition",u({},{type:"note"}),(0,o.kt)("p",{parentName:"admonition"},"Extensions only work in Chrome / Chromium in non-headless mode, launched with a persistent context.")),(0,o.kt)("p",null,"The following is code for getting a handle to the ",(0,o.kt)("a",u({parentName:"p"},{href:"https://developer.chrome.com/extensions/background_pages"}),"background page")," of a ",(0,o.kt)("a",u({parentName:"p"},{href:"https://developer.chrome.com/docs/extensions/mv2/"}),"Manifest v2")," extension whose source is located in ",(0,o.kt)("inlineCode",{parentName:"p"},"./my-extension"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-js"}),"const { chromium } = require('playwright');\n\n(async () => {\n  const pathToExtension = require('path').join(__dirname, 'my-extension');\n  const userDataDir = '/tmp/test-user-data-dir';\n  const browserContext = await chromium.launchPersistentContext(userDataDir,{\n    headless: false,\n    args: [\n      `--disable-extensions-except=${pathToExtension}`,\n      `--load-extension=${pathToExtension}`\n    ]\n  });\n  let [backgroundPage] = browserContext.backgroundPages();\n  if (!backgroundPage)\n    backgroundPage = await browserContext.waitForEvent('backgroundpage');\n\n  // Test the background page as you would any other page.\n  await browserContext.close();\n})();\n")),(0,o.kt)("h2",u({},{id:"testing"}),"Testing"),(0,o.kt)("p",null,"To have the extension loaded when running tests you can use a test fixture to set the context. You can also dynamically retrieve the extension id and use it that to load and test the popup page for example."),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-ts"}),'import { test as base, expect, BrowserContext } from "@playwright/test";\nimport path from "path";\n\nexport const test = base.extend<{\n  context: BrowserContext;\n  extensionId: string;\n}>({\n  context: async ({ }, use) => {\n    const pathToExtension = path.join(__dirname, "my-extension");\n    const context = await chromium.launchPersistentContext("", {\n      headless: false,\n      args: [\n        `--disable-extensions-except=${pathToExtension}`,\n        `--load-extension=${pathToExtension}`,\n      ],\n    });\n    await use(context);\n    await context.close();\n  },\n  extensionId: async ({ context }, use) => {\n    /*\n    // for manifest v2:\n    let [background] = context.backgroundPages()\n    if (!background)\n      background = await context.waitForEvent("backgroundpage")\n    */\n\n    // for manifest v3:\n    let [background] = context.serviceWorkers();\n    if (!background)\n      background = await context.waitForEvent("serviceworker");\n\n    const extensionId = background.url().split("/")[2];\n    await use(extensionId);\n  },\n});\n\ntest("example test", async ({ page }) => {\n  await page.goto("https://example.com");\n  await expect(page.locator("body")).toHaveText("Changed by my-extension");\n});\n\ntest("popup page", async ({ page, extensionId }) => {\n  await page.goto(`chrome-extension://${extensionId}/popup.html`);\n  await expect(page.locator("body")).toHaveText("my-extension popup");\n});\n')))}b.isMDXComponent=!0}}]);