"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7201],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,m=d["".concat(l,".").concat(g)]||d[g]||p[g]||s;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4455:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7294),r=n(6010),s="tabItem_Ymn6",i=Object.defineProperty,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;function p({children:e,hidden:t,className:n}){return a.createElement("div",((e,t)=>{for(var n in t||(t={}))l.call(t,n)&&u(e,n,t[n]);if(o)for(var n of o(t))c.call(t,n)&&u(e,n,t[n]);return e})({role:"tabpanel",className:(0,r.Z)(s,n)},{hidden:t}),e)}},5332:function(e,t,n){n.d(t,{Z:function(){return v}});var a=n(7294),r=n(6010),s=n(4939),i=n(2174),o=n(2107),l=n(8757),c="tabList__CuJ",u="tabItem_LNqP",p=Object.defineProperty,d=Object.defineProperties,g=Object.getOwnPropertyDescriptors,m=Object.getOwnPropertySymbols,h=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,f=(e,t,n)=>t in e?p(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,b=(e,t)=>{for(var n in t||(t={}))h.call(t,n)&&f(e,n,t[n]);if(m)for(var n of m(t))y.call(t,n)&&f(e,n,t[n]);return e};function w(e){var t,n;const{lazy:s,block:p,defaultValue:m,values:h,groupId:y,className:f}=e,w=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),v=null!=h?h:w.map((({props:{value:e,label:t,attributes:n}})=>({value:e,label:t,attributes:n}))),T=(0,i.l)(v,((e,t)=>e.value===t.value));if(T.length>0)throw new Error(`Docusaurus error: Duplicate values "${T.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===m?m:null!=(n=null!=m?m:null==(t=w.find((e=>e.props.default)))?void 0:t.props.value)?n:w[0].props.value;if(null!==k&&!v.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${v.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:P,setTabGroupChoices:x}=(0,o.U)(),[N,O]=(0,a.useState)(k),S=[],{blockElementScrollPositionUntilNextRender:E}=(0,l.o5)();if(null!=y){const e=P[y];null!=e&&e!==N&&v.some((t=>t.value===e))&&O(e)}const A=e=>{const t=e.currentTarget,n=S.indexOf(t),a=v[n].value;a!==N&&(E(t),O(a),null!=y&&x(y,String(a)))},j=e=>{var t,n;let a=null;switch(e.key){case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;a=null!=(t=S[n])?t:S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;a=null!=(n=S[t])?n:S[S.length-1];break}}null==a||a.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},f)},v.map((({value:e,label:t,attributes:n})=>{return a.createElement("li",(s=b({role:"tab",tabIndex:N===e?0:-1,"aria-selected":N===e,key:e,ref:e=>S.push(e),onKeyDown:j,onFocus:A,onClick:A},n),i={className:(0,r.Z)("tabs__item",u,null==n?void 0:n.className,{"tabs__item--active":N===e})},d(s,g(i))),null!=t?t:e);var s,i}))),s?(0,a.cloneElement)(w.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},w.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function v(e){const t=(0,s.Z)();return a.createElement(w,b({key:String(t)},e))}},8888:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return h},default:function(){return v},frontMatter:function(){return m},metadata:function(){return y},toc:function(){return b}});var a=n(3905),r=n(5332),s=n(4455),i=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,g=(e,t)=>{for(var n in t||(t={}))u.call(t,n)&&d(e,n,t[n]);if(c)for(var n of c(t))p.call(t,n)&&d(e,n,t[n]);return e};const m={id:"writing-tests",title:"Writing Tests"},h=void 0,y={unversionedId:"writing-tests",id:"writing-tests",title:"Writing Tests",description:"Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Playwright comes with auto-wait built in meaning it waits for elements to be actionable prior to performing actions. Playwright provides the Expect function to write assertions.",source:"@site/docs/writing-tests.mdx",sourceDirName:".",slug:"/writing-tests",permalink:"/dotnet/docs/next/writing-tests",draft:!1,tags:[],version:"current",frontMatter:{id:"writing-tests",title:"Writing Tests"},sidebar:"docs",previous:{title:"Installation",permalink:"/dotnet/docs/next/intro"},next:{title:"Running Tests",permalink:"/dotnet/docs/next/running-tests"}},f={},b=[{value:"Assertions",id:"assertions",level:3},{value:"Locators",id:"locators",level:3},{value:"Test Isolation",id:"test-isolation",level:3},{value:"Using Test Hooks",id:"using-test-hooks",level:3},{value:"What&#39;s Next",id:"whats-next",level:2}],w={toc:b};function v(e){var t,n=e,{components:i}=n,d=((e,t)=>{var n={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&c)for(var a of c(e))t.indexOf(a)<0&&p.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=g(g({},w),d),o(t,l({components:i,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Playwright comes with ",(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/actionability"}),"auto-wait")," built in meaning it waits for elements to be actionable prior to performing actions. Playwright provides the ",(0,a.kt)("a",g({parentName:"p"},{href:"./test-assertions"}),"Expect")," function to write assertions."),(0,a.kt)("p",null,"Take a look at the example test below to see how to write a test using web first assertions, locators and selectors."),(0,a.kt)(r.Z,{defaultValue:"nunit",values:[{label:"NUnit",value:"nunit"},{label:"MSTest",value:"mstest"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"nunit",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'using System.Text.RegularExpressions;\nusing Microsoft.Playwright.NUnit;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\npublic class Tests : PageTest\n{\n    [Test]\n    async public Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Expect a title "to contain" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n\n        // create a locator\n        var getStarted = Page.Locator("text=Get Started");\n\n        // Expect an attribute "to be strictly equal" to the value.\n        await Expect(getStarted).ToHaveAttributeAsync("href", "/docs/intro");\n\n        // Click the get started link.\n        await getStarted.ClickAsync();\n\n        // Expects the URL to contain intro.\n        await Expect(Page).ToHaveURLAsync(new Regex(".*intro"));\n    }\n}\n'))),(0,a.kt)(s.Z,{value:"mstest",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'using System.Text.RegularExpressions;\nusing Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1 : PageTest\n{\n    [TestMethod]\n    async public Task HomepageHasPlaywrightInTitleAndGetStartedLinkLinkingtoTheIntroPage()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n\n        // Expect a title "to contain" a substring.\n        await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n\n        // create a locator\n        var getStarted = Page.Locator("text=Get Started");\n\n        // Expect an attribute "to be strictly equal" to the value.\n        await Expect(getStarted).ToHaveAttributeAsync("href", "/docs/intro");\n\n        // Click the get started link.\n        await getStarted.ClickAsync();\n\n        // Expects the URL to contain intro.\n        await Expect(Page).ToHaveURLAsync(new Regex(".*intro"));\n    }\n}\n')))),(0,a.kt)("h3",g({},{id:"assertions"}),"Assertions"),(0,a.kt)("p",null,"Playwright provides an async function called ",(0,a.kt)("a",g({parentName:"p"},{href:"./test-assertions"}),"Expect")," to assert and wait until the expected condition is met."),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'await Expect(Page).ToHaveTitleAsync(new Regex("Playwright"));\n')),(0,a.kt)("h3",g({},{id:"locators"}),"Locators"),(0,a.kt)("p",null,(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/locators"}),"Locators")," are the central piece of Playwright's auto-waiting and retry-ability. Locators represent a way to find element(s) on the page at any moment and are used to perform actions on elements such as ",(0,a.kt)("inlineCode",{parentName:"p"},".ClickAsync")," ",(0,a.kt)("inlineCode",{parentName:"p"},".FillAsync")," etc. Custom locators can be created with the ",(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/api/class-page#page-locator"}),"Page.Locator(selector, options)")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'var getStarted = Page.Locator("text=Get Started");\n\nawait Expect(getStarted).ToHaveAttributeAsync("href", "/docs/installation");\nawait getStarted.ClickAsync();\n')),(0,a.kt)("p",null,(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/selectors"}),"Selectors")," are strings that are used to create Locators. Playwright supports many different selectors like ",(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/selectors#text-selector"}),"Text"),", ",(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/selectors#css-selector"}),"CSS"),", ",(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/selectors#xpath-selectors"}),"XPath")," and many more. Learn more about available selectors and how to pick one in this ",(0,a.kt)("a",g({parentName:"p"},{href:"/dotnet/docs/next/selectors"}),"in-depth guide"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'await Expect(Page.Locator("text=Installation")).ToBeVisibleAsync();\n')),(0,a.kt)("h3",g({},{id:"test-isolation"}),"Test Isolation"),(0,a.kt)("p",null,"The Playwright NUnit and MSTest test framework base classes will isolate each test from each other by providing a separate ",(0,a.kt)("inlineCode",{parentName:"p"},"Page")," instance. Pages are isolated between tests due to the Browser Context, which is equivalent to a brand new browser profile, where every test gets a fresh environment, even when multiple tests run in a single Browser."),(0,a.kt)(r.Z,{defaultValue:"nunit",values:[{label:"NUnit",value:"nunit"},{label:"MSTest",value:"mstest"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"nunit",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'using System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\npublic class Tests : PageTest\n{\n    [Test]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n'))),(0,a.kt)(s.Z,{value:"mstest",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'using Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1 : PageTest\n{\n    [TestMethod]\n    public async Task BasicTest()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n')))),(0,a.kt)("h3",g({},{id:"using-test-hooks"}),"Using Test Hooks"),(0,a.kt)("p",null,"You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"SetUp"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"TearDown")," in NUnit or ",(0,a.kt)("inlineCode",{parentName:"p"},"TestInitialize"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"TestCleanup")," in MSTest to prepare and clean up your test environment:"),(0,a.kt)(r.Z,{defaultValue:"nunit",values:[{label:"NUnit",value:"nunit"},{label:"MSTest",value:"mstest"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"nunit",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'using System.Threading.Tasks;\nusing Microsoft.Playwright.NUnit;\nusing NUnit.Framework;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\npublic class Tests : PageTest\n{\n    [Test]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");\n    }\n\n    [SetUp]\n    public async Task SetUp()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n'))),(0,a.kt)(s.Z,{value:"mstest",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",g({parentName:"pre"},{className:"language-csharp"}),'using Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\npublic class UnitTest1 : PageTest\n{\n    [TestMethod]\n    public async Task MainNavigation()\n    {\n        // Assertions use the expect API.\n        await Expect(Page).ToHaveURLAsync("https://playwright.dev/");\n    }\n\n    [TestInitialize]\n    public async Task TestInitialize()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n    }\n}\n')))),(0,a.kt)("h2",g({},{id:"whats-next"}),"What's Next"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",g({parentName:"li"},{href:"/dotnet/docs/next/running-tests"}),"Run single tests, multiple tests, headed mode")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",g({parentName:"li"},{href:"/dotnet/docs/next/codegen"}),"Generate tests with Codegen")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",g({parentName:"li"},{href:"/dotnet/docs/next/trace-viewer"}),"See a trace of your tests"))))}v.isMDXComponent=!0}}]);