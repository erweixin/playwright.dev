"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[4162],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(i,".").concat(d)]||m[d]||c[d]||s;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4455:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(7294),r=n(6010),s="tabItem_Ymn6",l=Object.defineProperty,o=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;function c({children:e,hidden:t,className:n}){return a.createElement("div",((e,t)=>{for(var n in t||(t={}))i.call(t,n)&&p(e,n,t[n]);if(o)for(var n of o(t))u.call(t,n)&&p(e,n,t[n]);return e})({role:"tabpanel",className:(0,r.Z)(s,n)},{hidden:t}),e)}},5332:function(e,t,n){n.d(t,{Z:function(){return y}});var a=n(7294),r=n(6010),s=n(4939),l=n(2174),o=n(2107),i=n(8757),u="tabList__CuJ",p="tabItem_LNqP",c=Object.defineProperty,m=Object.defineProperties,d=Object.getOwnPropertyDescriptors,h=Object.getOwnPropertySymbols,g=Object.prototype.hasOwnProperty,b=Object.prototype.propertyIsEnumerable,w=(e,t,n)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,k=(e,t)=>{for(var n in t||(t={}))g.call(t,n)&&w(e,n,t[n]);if(h)for(var n of h(t))b.call(t,n)&&w(e,n,t[n]);return e};function f(e){var t,n;const{lazy:s,block:c,defaultValue:h,values:g,groupId:b,className:w}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=null!=g?g:f.map((({props:{value:e,label:t,attributes:n}})=>({value:e,label:t,attributes:n}))),v=(0,l.l)(y,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===h?h:null!=(n=null!=h?h:null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)?n:f[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:T,setTabGroupChoices:P}=(0,o.U)(),[x,C]=(0,a.useState)(N),S=[],{blockElementScrollPositionUntilNextRender:O}=(0,i.o5)();if(null!=b){const e=T[b];null!=e&&e!==x&&y.some((t=>t.value===e))&&C(e)}const B=e=>{const t=e.currentTarget,n=S.indexOf(t),a=y[n].value;a!==x&&(O(t),C(a),null!=b&&P(b,String(a)))},E=e=>{var t,n;let a=null;switch(e.key){case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;a=null!=(t=S[n])?t:S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;a=null!=(n=S[t])?n:S[S.length-1];break}}null==a||a.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},w)},y.map((({value:e,label:t,attributes:n})=>{return a.createElement("li",(s=k({role:"tab",tabIndex:x===e?0:-1,"aria-selected":x===e,key:e,ref:e=>S.push(e),onKeyDown:E,onFocus:B,onClick:B},n),l={className:(0,r.Z)("tabs__item",p,null==n?void 0:n.className,{"tabs__item--active":x===e})},m(s,d(l))),null!=t?t:e);var s,l}))),s?(0,a.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function y(e){const t=(0,s.Z)();return a.createElement(f,k({key:String(t)},e))}},148:function(e,t,n){n.r(t),n.d(t,{assets:function(){return w},contentTitle:function(){return g},default:function(){return y},frontMatter:function(){return h},metadata:function(){return b},toc:function(){return k}});var a=n(3905),r=n(5332),s=n(4455),l=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&m(e,n,t[n]);if(u)for(var n of u(t))c.call(t,n)&&m(e,n,t[n]);return e};const h={id:"test-runners",title:"Test Runners"},g=void 0,b={unversionedId:"test-runners",id:"version-stable/test-runners",title:"Test Runners",description:"While Playwright for .NET isn't tied to a particular test runner or testing framework, in our experience it works best with the built-in .NET test runner, and using NUnit as the test framework. NUnit is also what we use internally for our tests.",source:"@site/versioned_docs/version-stable/test-runners.mdx",sourceDirName:".",slug:"/test-runners",permalink:"/dotnet/docs/test-runners",draft:!1,tags:[],version:"stable",frontMatter:{id:"test-runners",title:"Test Runners"},sidebar:"docs",previous:{title:"Trace Viewer",permalink:"/dotnet/docs/trace-viewer"},next:{title:"Getting started - Library",permalink:"/dotnet/docs/library"}},w={},k=[{value:"NUnit",id:"nunit",level:2},{value:"Creating an NUnit project",id:"creating-an-nunit-project",level:3},{value:"Running NUnit tests in Parallel",id:"running-nunit-tests-in-parallel",level:3},{value:"Customizing BrowserContext options",id:"customizing-browsercontext-options",level:3},{value:"Customizing Browser/launch options",id:"customizing-browserlaunch-options",level:3},{value:"Using Verbose API Logs",id:"using-verbose-api-logs",level:3},{value:"Using the .runsettings file",id:"using-the-runsettings-file",level:3},{value:"Base NUnit classes for Playwright",id:"base-nunit-classes-for-playwright",level:3},{value:"MSTest",id:"mstest",level:2},{value:"Creating an MSTest project",id:"creating-an-mstest-project",level:3},{value:"Running MSTest tests in Parallel",id:"running-mstest-tests-in-parallel",level:3},{value:"Customizing BrowserContext options",id:"customizing-browsercontext-options-1",level:3},{value:"Customizing Browser/launch options",id:"customizing-browserlaunch-options-1",level:3},{value:"Using Verbose API Logs",id:"using-verbose-api-logs-1",level:3},{value:"Using the .runsettings file",id:"using-the-runsettings-file-1",level:3},{value:"Base MSTest classes for Playwright",id:"base-mstest-classes-for-playwright",level:3},{value:"xUnit support",id:"xunit-support",level:2}],f={toc:k};function y(e){var t,n=e,{components:l}=n,m=((e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&u)for(var a of u(e))t.indexOf(a)<0&&c.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=d(d({},f),m),o(t,i({components:l,mdxType:"MDXLayout"}))),(0,a.kt)("p",null,"While Playwright for .NET isn't tied to a particular test runner or testing framework, in our experience it works best with the built-in .NET test runner, and using NUnit as the test framework. NUnit is also what we use internally for ",(0,a.kt)("a",d({parentName:"p"},{href:"https://github.com/microsoft/playwright-dotnet/tree/main/src/Playwright.Tests"}),"our tests"),"."),(0,a.kt)("p",null,"Playwright and Browser instances can be reused between tests for better performance. We recommend running each test case in a new BrowserContext, this way browser state will be isolated between the tests."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",d({parentName:"li"},{href:"#nunit"}),"NUnit")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",d({parentName:"li"},{href:"#mstest"}),"MSTest")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",d({parentName:"li"},{href:"#xunit-support"}),"xUnit support"))),(0,a.kt)("h2",d({},{id:"nunit"}),"NUnit"),(0,a.kt)("p",null,"Playwright provides base classes to write tests with NUnit via the ",(0,a.kt)("a",d({parentName:"p"},{href:"https://www.nuget.org/packages/Microsoft.Playwright.NUnit"}),(0,a.kt)("inlineCode",{parentName:"a"},"Microsoft.Playwright.NUnit"))," package."),(0,a.kt)("h3",d({},{id:"creating-an-nunit-project"}),"Creating an NUnit project"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"# Create a new project\ndotnet new nunit -n PlaywrightTests\ncd PlaywrightTests\n# Add the required reference\ndotnet add package Microsoft.Playwright.NUnit\ndotnet build\n# Install the required browsers and operating system dependencies\npwsh bin\\Debug\\netX\\playwright.ps1 install --with-deps\n")),(0,a.kt)("p",null,"Modify the UnitTest1.cs:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-csharp"}),'using Microsoft.Playwright.NUnit;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\npublic class MyTest : PageTest\n{\n    [Test]\n    async public Task ShouldHaveTheCorrectSlogan()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n        await Expect(Page.Locator("text=enables reliable end-to-end testing for modern web apps")).ToBeVisibleAsync();\n    }\n\n    [Test]\n    public async Task ShouldHaveTheCorrectTitle()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n        var title = Page.Locator(".navbar__inner .navbar__title");\n        await Expect(title).ToHaveTextAsync("Playwright");\n    }\n}\n')),(0,a.kt)("p",null,"Run your tests against Chromium"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"dotnet test\n")),(0,a.kt)("p",null,"Run your tests against WebKit"),(0,a.kt)(r.Z,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bash",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"BROWSER=webkit dotnet test\n"))),(0,a.kt)(s.Z,{value:"powershell",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-powershell"}),'$env:BROWSER="webkit"\ndotnet test\n'))),(0,a.kt)(s.Z,{value:"batch",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-batch"}),"set BROWSER=webkit\ndotnet test\n")))),(0,a.kt)("p",null,"Run your tests with GUI"),(0,a.kt)(r.Z,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bash",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"HEADED=1 dotnet test\n"))),(0,a.kt)(s.Z,{value:"powershell",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-powershell"}),'$env:HEADED="1"\ndotnet test\n'))),(0,a.kt)(s.Z,{value:"batch",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-batch"}),"set HEADED=1\ndotnet test\n")))),(0,a.kt)("p",null,"You can also choose specifically which tests to run, using the ",(0,a.kt)("a",d({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=nunit"}),"filtering capabilities"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),'dotnet test --filter "Name~ShouldAdd"\n')),(0,a.kt)("h3",d({},{id:"running-nunit-tests-in-parallel"}),"Running NUnit tests in Parallel"),(0,a.kt)("p",null,"By default NUnit will run all test files in parallel, while running tests inside each file sequentially. It will create as many processes as there are cores on the host system. You can adjust this behavior using the NUnit.NumberOfTestWorkers parameter."),(0,a.kt)("p",null,"For CPU-bound tests, we recommend using as many workers as there are cores on your system, divided by 2. For IO-bound tests you can use as many workers as you have cores."),(0,a.kt)("h3",d({},{id:"customizing-browsercontext-options"}),"Customizing ",(0,a.kt)("a",d({parentName:"h3"},{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"}),"BrowserContext")," options"),(0,a.kt)("p",null,"To customize context options, you can override the ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextOptions")," method of your test class derived from ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.Playwright.MSTest.PageTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.Playwright.MSTest.ContextTest"),". See the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-csharp"}),'using Microsoft.Playwright.NUnit;\n\nnamespace PlaywrightTests;\n\n[Parallelizable(ParallelScope.Self)]\npublic class MyTest : PageTest\n{\n    [Test]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync("/login");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = "https://github.com",\n        };\n    }\n}\n')),(0,a.kt)("h3",d({},{id:"customizing-browserlaunch-options"}),"Customizing ",(0,a.kt)("a",d({parentName:"h3"},{href:"/dotnet/docs/api/class-browser",title:"Browser"}),"Browser"),"/launch options"),(0,a.kt)("p",null,(0,a.kt)("a",d({parentName:"p"},{href:"/dotnet/docs/api/class-browser",title:"Browser"}),"Browser"),"/launch options can be override either using a run settings file or by setting the run settings options directly via the CLI. See the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <TestRunParameters>\n    <Parameter name="browser" value="chromium" />\n    <Parameter name="headless" value="false" />\n    <Parameter name="channel" value="msedge" />\n  </TestRunParameters>\n</RunSettings>\n')),(0,a.kt)(r.Z,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bash",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),'dotnet test -- TestRunParameters.Parameter\\(name=\\"browser\\", value=\\"chromium\\"\\) TestRunParameters.Parameter\\(name=\\"headless\\", value=\\"false\\"\\) TestRunParameters.Parameter\\(name=\\"channel\\", value=\\"msedge\\"\\)\n'))),(0,a.kt)(s.Z,{value:"powershell",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-powershell"}),'dotnet test -- TestRunParameters.Parameter(name=\\"browser\\", value=\\"chromium\\") TestRunParameters.Parameter(name=\\"headless\\", value=\\"false\\") TestRunParameters.Parameter(name=\\"channel\\", value=\\"msedge\\")\n'))),(0,a.kt)(s.Z,{value:"batch",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-batch"}),'dotnet test -- TestRunParameters.Parameter(name=\\"browser\\", value=\\"chromium\\") TestRunParameters.Parameter(name=\\"headless\\", value=\\"false\\") TestRunParameters.Parameter(name=\\"channel\\", value=\\"msedge\\")\n')))),(0,a.kt)("h3",d({},{id:"using-verbose-api-logs"}),"Using Verbose API Logs"),(0,a.kt)("p",null,"When you have enabled the ",(0,a.kt)("a",d({parentName:"p"},{href:"/dotnet/docs/debug#verbose-api-logs"}),"verbose API log"),", via the ",(0,a.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable, you will see the messages in the standard error stream. In NUnit, within Visual Studio, that will be the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tests")," pane of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Output")," window. It will also be displayed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Test Log")," for each test."),(0,a.kt)("h3",d({},{id:"using-the-runsettings-file"}),"Using the .runsettings file"),(0,a.kt)("p",null,"When running tests from Visual Studio, you can take advantage of the ",(0,a.kt)("inlineCode",{parentName:"p"},".runsettings")," file."),(0,a.kt)("p",null,"For example, to specify the amount of workers (",(0,a.kt)("inlineCode",{parentName:"p"},"NUnit.NumberOfTestWorkers"),"), you can use the following snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <NUnit>\n    <NumberOfTestWorkers>24</NumberOfTestWorkers>\n  </NUnit>\n</RunSettings>\n')),(0,a.kt)("p",null,"If you want to enable debugging, you can set the ",(0,a.kt)("inlineCode",{parentName:"p"},"DEBUG")," variable to ",(0,a.kt)("inlineCode",{parentName:"p"},"pw:api")," as documented, by doing:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n</RunSettings>\n')),(0,a.kt)("h3",d({},{id:"base-nunit-classes-for-playwright"}),"Base NUnit classes for Playwright"),(0,a.kt)("p",null,"There are few base classes available to you in ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.Playwright.NUnit")," namespace:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Test"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"PageTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Each test gets a fresh copy of a web ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-page",title:"Page"}),"Page")," created in its own unique ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"}),"BrowserContext"),". Extending this class is the simplest way of writing a fully-functional Playwright test.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Note: You can override the ",(0,a.kt)("inlineCode",{parentName:"td"},"ContextOptions")," method in each test file to control context options, the ones typically passed into the ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browser#browser-new-context"}),"Browser.NewContextAsync(options)")," method. That way you can specify all kinds of emulation options for your test file individually.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"ContextTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Each test will get a fresh copy of a ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"}),"BrowserContext"),". You can create as many pages in this context as you'd like. Using this test is the easiest way to test multi-page scenarios where you need more than one tab.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Note: You can override the ",(0,a.kt)("inlineCode",{parentName:"td"},"ContextOptions")," method in each test file to control context options, the ones typically passed into the ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browser#browser-new-context"}),"Browser.NewContextAsync(options)")," method. That way you can specify all kinds of emulation options for your test file individually.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"BrowserTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"PlaywrightTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"This gives each test a Playwright object so that the test could start and stop as many browsers as it likes.")))),(0,a.kt)("h2",d({},{id:"mstest"}),"MSTest"),(0,a.kt)("p",null,"Playwright provides base classes to write tests with MSTest via the ",(0,a.kt)("a",d({parentName:"p"},{href:"https://www.nuget.org/packages/Microsoft.Playwright.MSTest"}),(0,a.kt)("inlineCode",{parentName:"a"},"Microsoft.Playwright.MSTest"))," package."),(0,a.kt)("h3",d({},{id:"creating-an-mstest-project"}),"Creating an MSTest project"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"# Create a new project\ndotnet new mstest -n PlaywrightTests\ncd PlaywrightTests\n# Add the required reference\ndotnet add package Microsoft.Playwright.MSTest\ndotnet build\n# Install the required browsers and operating system dependencies\npwsh bin\\Debug\\netX\\playwright.ps1 install --with-deps\n")),(0,a.kt)("p",null,"Modify the UnitTest1.cs:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-csharp"}),'using Microsoft.Playwright.MSTest;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class UnitTest1: PageTest\n{\n    [TestMethod]\n    async public Task ShouldHaveTheCorrectSlogan()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n        await Expect(Page.Locator("text=enables reliable end-to-end testing for modern web apps")).ToBeVisibleAsync();\n    }\n\n    [TestMethod]\n    async public Task ShouldHaveTheCorrectTitle()\n    {\n        await Page.GotoAsync("https://playwright.dev");\n        var title = Page.Locator(".navbar__inner .navbar__title");\n        await Expect(title).ToHaveTextAsync("Playwright");\n    }\n}\n')),(0,a.kt)("p",null,"Run your tests against Chromium"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"dotnet test\n")),(0,a.kt)("p",null,"Run your tests against WebKit"),(0,a.kt)(r.Z,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bash",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"BROWSER=webkit dotnet test\n"))),(0,a.kt)(s.Z,{value:"powershell",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-powershell"}),'$env:BROWSER="webkit"\ndotnet test\n'))),(0,a.kt)(s.Z,{value:"batch",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-batch"}),"set BROWSER=webkit\ndotnet test\n")))),(0,a.kt)("p",null,"Run your tests with GUI"),(0,a.kt)(r.Z,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bash",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"HEADED=1 dotnet test\n"))),(0,a.kt)(s.Z,{value:"powershell",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-powershell"}),'$env:HEADED="1"\ndotnet test\n'))),(0,a.kt)(s.Z,{value:"batch",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-batch"}),"set HEADED=1\ndotnet test\n")))),(0,a.kt)("p",null,"You can also choose specifically which tests to run, using the ",(0,a.kt)("a",d({parentName:"p"},{href:"https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=mstest"}),"filtering capabilities"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),'dotnet test --filter "Name~ShouldAdd"\n')),(0,a.kt)("h3",d({},{id:"running-mstest-tests-in-parallel"}),"Running MSTest tests in Parallel"),(0,a.kt)("p",null,"By default MSTest will run all classes in parallel, while running tests inside each class sequentially. It will create as many processes as there are cores on the host system. You can adjust this behavior by using the following CLI parameter or using a ",(0,a.kt)("inlineCode",{parentName:"p"},".runsettings")," file, see below."),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),"dotnet test --settings:.runsettings -- MSTest.Parallelize.Workers=4\n")),(0,a.kt)("h3",d({},{id:"customizing-browsercontext-options-1"}),"Customizing ",(0,a.kt)("a",d({parentName:"h3"},{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"}),"BrowserContext")," options"),(0,a.kt)("p",null,"To customize context options, you can override the ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextOptions")," method of your test class derived from ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.Playwright.MSTest.PageTest")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.Playwright.MSTest.ContextTest"),". See the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-csharp"}),'using System.Threading.Tasks;\nusing Microsoft.Playwright;\nusing Microsoft.Playwright.MSTest;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace PlaywrightTests;\n\n[TestClass]\npublic class UnitTest1 : PageTest\n{\n    [TestMethod]\n    public async Task TestWithCustomContextOptions()\n    {\n        // The following Page (and BrowserContext) instance has the custom colorScheme, viewport and baseURL set:\n        await Page.GotoAsync("/login");\n    }\n\n    public override BrowserNewContextOptions ContextOptions()\n    {\n        return new BrowserNewContextOptions()\n        {\n            ColorScheme = ColorScheme.Light,\n            ViewportSize = new()\n            {\n                Width = 1920,\n                Height = 1080\n            },\n            BaseURL = "https://github.com",\n        };\n    }\n}\n\n')),(0,a.kt)("h3",d({},{id:"customizing-browserlaunch-options-1"}),"Customizing ",(0,a.kt)("a",d({parentName:"h3"},{href:"/dotnet/docs/api/class-browser",title:"Browser"}),"Browser"),"/launch options"),(0,a.kt)("p",null,(0,a.kt)("a",d({parentName:"p"},{href:"/dotnet/docs/api/class-browser",title:"Browser"}),"Browser"),"/launch options can be override either using a run settings file or by setting the run settings options directly via the CLI. See the following example:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <TestRunParameters>\n    <Parameter name="browser" value="chromium" />\n    <Parameter name="headless" value="false" />\n    <Parameter name="channel" value="msedge" />\n  </TestRunParameters>\n</RunSettings>\n')),(0,a.kt)(r.Z,{groupId:"bash-flavor",defaultValue:"bash",values:[{label:"Bash",value:"bash"},{label:"PowerShell",value:"powershell"},{label:"Batch",value:"batch"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bash",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-bash"}),'dotnet test -- TestRunParameters.Parameter\\(name=\\"browser\\", value=\\"chromium\\"\\) TestRunParameters.Parameter\\(name=\\"headless\\", value=\\"false\\"\\) TestRunParameters.Parameter\\(name=\\"channel\\", value=\\"msedge\\"\\)\n'))),(0,a.kt)(s.Z,{value:"powershell",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-powershell"}),'dotnet test -- TestRunParameters.Parameter(name=\\"browser\\", value=\\"chromium\\") TestRunParameters.Parameter(name=\\"headless\\", value=\\"false\\") TestRunParameters.Parameter(name=\\"channel\\", value=\\"msedge\\")\n'))),(0,a.kt)(s.Z,{value:"batch",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-batch"}),'dotnet test -- TestRunParameters.Parameter(name=\\"browser\\", value=\\"chromium\\") TestRunParameters.Parameter(name=\\"headless\\", value=\\"false\\") TestRunParameters.Parameter(name=\\"channel\\", value=\\"msedge\\")\n')))),(0,a.kt)("h3",d({},{id:"using-verbose-api-logs-1"}),"Using Verbose API Logs"),(0,a.kt)("p",null,"When you have enabled the ",(0,a.kt)("a",d({parentName:"p"},{href:"/dotnet/docs/debug#verbose-api-logs"}),"verbose API log"),", via the ",(0,a.kt)("inlineCode",{parentName:"p"},"DEBUG")," environment variable, you will see the messages in the standard error stream. In MSTest, within Visual Studio, that will be the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tests")," pane of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Output")," window. It will also be displayed in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Test Log")," for each test."),(0,a.kt)("h3",d({},{id:"using-the-runsettings-file-1"}),"Using the .runsettings file"),(0,a.kt)("p",null,"When running tests from Visual Studio, you can take advantage of the ",(0,a.kt)("inlineCode",{parentName:"p"},".runsettings")," file."),(0,a.kt)("p",null,"For example, to specify the amount of workers (",(0,a.kt)("inlineCode",{parentName:"p"},"MSTest.Parallelize.Workers"),"), you can use the following snippet:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),"<RunSettings>\n\x3c!-- MSTest adapter --\x3e  \n  <MSTest>\n    <Parallelize>\n      <Workers>4</Workers>\n      <Scope>ClassLevel</Scope>\n    </Parallelize>\n  </MSTest>\n</RunSettings>\n")),(0,a.kt)("p",null,"If you want to enable debugging, you can set the ",(0,a.kt)("inlineCode",{parentName:"p"},"DEBUG")," variable to ",(0,a.kt)("inlineCode",{parentName:"p"},"pw:api")," as documented, by doing:"),(0,a.kt)("pre",null,(0,a.kt)("code",d({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="utf-8"?>\n<RunSettings>\n  <RunConfiguration>\n    <EnvironmentVariables>\n      <DEBUG>pw:api</DEBUG>\n    </EnvironmentVariables>\n  </RunConfiguration>\n</RunSettings>\n')),(0,a.kt)("h3",d({},{id:"base-mstest-classes-for-playwright"}),"Base MSTest classes for Playwright"),(0,a.kt)("p",null,"There are few base classes available to you in ",(0,a.kt)("inlineCode",{parentName:"p"},"Microsoft.Playwright.MSTest")," namespace:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Test"),(0,a.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"PageTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Each test gets a fresh copy of a web ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-page",title:"Page"}),"Page")," created in its own unique ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"}),"BrowserContext"),". Extending this class is the simplest way of writing a fully-functional Playwright test.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Note: You can override the ",(0,a.kt)("inlineCode",{parentName:"td"},"ContextOptions")," method in each test file to control context options, the ones typically passed into the ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browser#browser-new-context"}),"Browser.NewContextAsync(options)")," method. That way you can specify all kinds of emulation options for your test file individually.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"ContextTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Each test will get a fresh copy of a ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browsercontext",title:"BrowserContext"}),"BrowserContext"),". You can create as many pages in this context as you'd like. Using this test is the easiest way to test multi-page scenarios where you need more than one tab.",(0,a.kt)("br",null),(0,a.kt)("br",null),"Note: You can override the ",(0,a.kt)("inlineCode",{parentName:"td"},"ContextOptions")," method in each test file to control context options, the ones typically passed into the ",(0,a.kt)("a",d({parentName:"td"},{href:"/dotnet/docs/api/class-browser#browser-new-context"}),"Browser.NewContextAsync(options)")," method. That way you can specify all kinds of emulation options for your test file individually.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"BrowserTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"Each test will get a browser and can create as many contexts as it likes. Each test is responsible for cleaning up all the contexts it created.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",d({parentName:"tr"},{align:null}),"PlaywrightTest"),(0,a.kt)("td",d({parentName:"tr"},{align:null}),"This gives each test a Playwright object so that the test could start and stop as many browsers as it likes.")))),(0,a.kt)("h2",d({},{id:"xunit-support"}),"xUnit support"),(0,a.kt)("p",null,"While using xUnit is also supported, we do not support running parallel tests. This is a well known problem/design limitation outlined by the maintainers across ",(0,a.kt)("a",d({parentName:"p"},{href:"https://github.com/xunit/xunit/issues/2003"}),"several")," ",(0,a.kt)("a",d({parentName:"p"},{href:"https://github.com/xunit/xunit/issues/2111#issuecomment-650004247"}),"issues"),"."))}y.isMDXComponent=!0}}]);