"use strict";(self.webpackChunkplaywright_dev=self.webpackChunkplaywright_dev||[]).push([[7296],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),c=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(o,".").concat(d)]||m[d]||p[d]||s;return n?i.createElement(g,r(r({ref:t},u),{},{components:n})):i.createElement(g,r({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<s;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8952:function(e,t,n){n.r(t),n.d(t,{assets:function(){return f},contentTitle:function(){return d},default:function(){return x},frontMatter:function(){return m},metadata:function(){return g},toc:function(){return h}});var i=n(3905),a=Object.defineProperty,s=Object.defineProperties,r=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&u(e,n,t[n]);if(l)for(var n of l(t))c.call(t,n)&&u(e,n,t[n]);return e};const m={id:"accessibility-testing",title:"Accessibility testing"},d=void 0,g={unversionedId:"accessibility-testing",id:"accessibility-testing",title:"Accessibility testing",description:"Playwright can be used to test your application for many types of accessibility issues.",source:"@site/docs/accessibility-testing.mdx",sourceDirName:".",slug:"/accessibility-testing",permalink:"/java/docs/next/accessibility-testing",draft:!1,tags:[],version:"current",frontMatter:{id:"accessibility-testing",title:"Accessibility testing"},sidebar:"docs",previous:{title:"Release notes",permalink:"/java/docs/next/release-notes"},next:{title:"Auto-waiting",permalink:"/java/docs/next/actionability"}},f={},h=[{value:"Disclaimer",id:"disclaimer",level:2},{value:"Example accessibility tests",id:"example-accessibility-tests",level:2},{value:"Example 1: Scanning an entire page",id:"example-1-scanning-an-entire-page",level:3},{value:"Example 2: Configuring axe to scan a specific part of a page",id:"example-2-configuring-axe-to-scan-a-specific-part-of-a-page",level:3},{value:"Example 3: Scanning for WCAG violations",id:"example-3-scanning-for-wcag-violations",level:3},{value:"Handling known issues",id:"handling-known-issues",level:2},{value:"Excluding individual elements from a scan",id:"excluding-individual-elements-from-a-scan",level:3},{value:"Disabling individual scan rules",id:"disabling-individual-scan-rules",level:3},{value:"Using violation fingerprints to specific known issues",id:"using-violation-fingerprints-to-specific-known-issues",level:3},{value:"Using a test fixture for common axe configuration",id:"using-a-test-fixture-for-common-axe-configuration",level:2},{value:"Creating a fixture",id:"creating-a-fixture",level:3},{value:"Using a fixture",id:"using-a-fixture",level:3}],y={toc:h};function x(e){var t,n=e,{components:a}=n,u=((e,t)=>{var n={};for(var i in e)o.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&l)for(var i of l(e))t.indexOf(i)<0&&c.call(e,i)&&(n[i]=e[i]);return n})(n,["components"]);return(0,i.kt)("wrapper",(t=p(p({},y),u),s(t,r({components:a,mdxType:"MDXLayout"}))),(0,i.kt)("p",null,"Playwright can be used to test your application for many types of accessibility issues."),(0,i.kt)("p",null,"A few examples of problems this can catch include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Text that would be hard to read for users with vision impairments due to poor color contrast with the background behind it"),(0,i.kt)("li",{parentName:"ul"},"UI controls and form elements without labels that a screen reader could identify"),(0,i.kt)("li",{parentName:"ul"},"Interactive elements with duplicate IDs which can confuse assistive technologies")),(0,i.kt)("p",null,"The following examples rely on the ",(0,i.kt)("a",p({parentName:"p"},{href:"https://mvnrepository.com/artifact/com.deque.html.axe-core/playwright"}),(0,i.kt)("inlineCode",{parentName:"a"},"com.deque.html.axe-core/playwright"))," Maven package which adds support for running the ",(0,i.kt)("a",p({parentName:"p"},{href:"https://www.deque.com/axe/"}),"axe accessibility testing engine")," as part of your Playwright tests."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",p({parentName:"li"},{href:"#disclaimer"}),"Disclaimer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",p({parentName:"li"},{href:"#example-accessibility-tests"}),"Example accessibility tests")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",p({parentName:"li"},{href:"#handling-known-issues"}),"Handling known issues")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",p({parentName:"li"},{href:"#using-a-test-fixture-for-common-axe-configuration"}),"Using a test fixture for common axe configuration"))),(0,i.kt)("h2",p({},{id:"disclaimer"}),"Disclaimer"),(0,i.kt)("p",null,"Automated accessibility tests can detect some common accessibility problems such as missing or invalid properties. But many accessibility problems can only be discovered through manual testing. We recommend using a combination of automated testing, manual accessibility assessments, and inclusive user testing."),(0,i.kt)("p",null,"For manual assessments, we recommend ",(0,i.kt)("a",p({parentName:"p"},{href:"https://accessibilityinsights.io/docs/web/overview/?referrer=playwright-accessibility-testing-java"}),"Accessibility Insights for Web"),", a free and open source dev tool that walks you through assessing a website for ",(0,i.kt)("a",p({parentName:"p"},{href:"https://www.w3.org/WAI/WCAG21/quickref/?currentsidebar=%23col_customize&levels=aaa"}),"WCAG 2.1 AA")," coverage."),(0,i.kt)("h2",p({},{id:"example-accessibility-tests"}),"Example accessibility tests"),(0,i.kt)("p",null,"Accessibility tests work just like any other Playwright test. You can either create separate test cases for them, or integrate accessibility scans and assertions into your existing test cases."),(0,i.kt)("p",null,"The following examples demonstrate a few basic accessibility testing scenarios."),(0,i.kt)("h3",p({},{id:"example-1-scanning-an-entire-page"}),"Example 1: Scanning an entire page"),(0,i.kt)("p",null,"This example demonstrates how to test an entire page for automatically detectable accessibility violations. The test:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Imports the ",(0,i.kt)("a",p({parentName:"li"},{href:"https://mvnrepository.com/artifact/com.deque.html.axe-core/playwright"}),(0,i.kt)("inlineCode",{parentName:"a"},"com.deque.html.axe-core/playwright"))," package"),(0,i.kt)("li",{parentName:"ol"},"Uses normal JUnit 5 ",(0,i.kt)("inlineCode",{parentName:"li"},"@Test")," syntax to define a test case"),(0,i.kt)("li",{parentName:"ol"},"Uses normal Playwright syntax to open a browser and navigate to the page under test"),(0,i.kt)("li",{parentName:"ol"},"Invokes ",(0,i.kt)("inlineCode",{parentName:"li"},"AxeBuilder.analyze()")," to run the accessibility scan against the page"),(0,i.kt)("li",{parentName:"ol"},"Uses normal JUnit 5 test assertions to verify that there are no violations in the returned scan results")),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'import com.deque.html.axecore.playwright.*; // 1\nimport com.deque.html.axecore.utilities.axeresults.*;\n\nimport org.junit.jupiter.api.*;\nimport com.microsoft.playwright.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class HomepageTests {\n  @Test // 2\n  void shouldNotHaveAutomaticallyDetectableAccessibilityIssues() throws Exception {\n    Playwright playwright = Playwright.create();\n    Browser browser = playwright.chromium().launch();\n    BrowserContext context = browser.newContext();\n    Page page = context.newPage();\n\n    page.navigate("https://your-site.com/"); // 3\n\n    AxeResults accessibilityScanResults = new AxeBuilder(page).analyze(); // 4\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations()); // 5\n  }\n}\n')),(0,i.kt)("h3",p({},{id:"example-2-configuring-axe-to-scan-a-specific-part-of-a-page"}),"Example 2: Configuring axe to scan a specific part of a page"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"com.deque.html.axe-core/playwright")," supports many configuration options for axe. You can specify these options by using a Builder pattern with the ",(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder")," class."),(0,i.kt)("p",null,"For example, you can use ",(0,i.kt)("a",p({parentName:"p"},{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderincludeliststring-selector"}),(0,i.kt)("inlineCode",{parentName:"a"},"AxeBuilder.include()"))," to constrain an accessibility scan to only run against one specific part of a page."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder.analyze()")," will scan the page ",(0,i.kt)("em",{parentName:"p"},"in its current state")," when you call it. To scan parts of a page that are revealed based on UI interactions, use ",(0,i.kt)("a",p({parentName:"p"},{href:"/java/docs/next/locators"}),"Locators")," to interact with the page before invoking ",(0,i.kt)("inlineCode",{parentName:"p"},"analyze()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'@Test\nvoid navigationMenuFlyoutShouldNotHaveAutomaticallyDetectableAccessibilityViolations() throws Exception {\n  page.navigate("https://your-site.com/");\n\n  page.locator("button[aria-label=\\"Navigation Menu\\"]").click();\n\n  // It is important to waitFor() the page to be in the desired\n  // state *before* running analyze(). Otherwise, axe might not\n  // find all the elements your test expects it to scan.\n  page.locator("#navigation-menu-flyout").waitFor();\n\n  AxeResults accessibilityScanResults = new AxeBuilder(page)\n    .include(Arrays.asList("#navigation-menu-flyout"))\n    .analyze();\n\n  assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n}\n')),(0,i.kt)("h3",p({},{id:"example-3-scanning-for-wcag-violations"}),"Example 3: Scanning for WCAG violations"),(0,i.kt)("p",null,"By default, axe checks against a wide variety of accessibility rules. Some of these rules correspond to specific success criteria from the ",(0,i.kt)("a",p({parentName:"p"},{href:"https://www.w3.org/TR/WCAG21/"}),"Web Content Accessibility Guidelines (WCAG)"),', and others are "best practice" rules that are not specifically required by any WCAG criteron.'),(0,i.kt)("p",null,'You can constrain an accessibility scan to only run those rules which are "tagged" as corresponding to specific WCAG success criteria by using ',(0,i.kt)("a",p({parentName:"p"},{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderwithtagsliststring-rules"}),(0,i.kt)("inlineCode",{parentName:"a"},"AxeBuilder.withTags()")),". For example, ",(0,i.kt)("a",p({parentName:"p"},{href:"https://accessibilityinsights.io/docs/web/getstarted/fastpass/?referrer=playwright-accessibility-testing-java"}),"Accessibility Insights for Web's Automated Checks")," only include axe rules that test for violations of WCAG A and AA success criteria; to match that behavior, you would use the tags ",(0,i.kt)("inlineCode",{parentName:"p"},"wcag2a"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"wcag2aa"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"wcag21a"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"wcag21aa"),"."),(0,i.kt)("p",null,"Note that ",(0,i.kt)("a",p({parentName:"p"},{href:"#disclaimer"}),"automated testing cannot detect all types of WCAG violations"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'AxeResults accessibilityScanResults = new AxeBuilder(page)\n  .withTags(Arrays.asList("wcag2a", "wcag2aa", "wcag21a", "wcag21aa"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n')),(0,i.kt)("p",null,"You can find a complete listing of the rule tags axe-core supports in ",(0,i.kt)("a",p({parentName:"p"},{href:"https://www.deque.com/axe/core-documentation/api-documentation/#axe-core-tags"}),'the "Axe-core Tags" section of the axe API documentation'),"."),(0,i.kt)("h2",p({},{id:"handling-known-issues"}),"Handling known issues"),(0,i.kt)("p",null,'A common question when adding accessibility tests to an application is "how do I suppress known violations?" The following examples demonstrate a few techniques you can use.'),(0,i.kt)("h3",p({},{id:"excluding-individual-elements-from-a-scan"}),"Excluding individual elements from a scan"),(0,i.kt)("p",null,"If your application contains a few specific elements with known issues, you can use ",(0,i.kt)("a",p({parentName:"p"},{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderexcludeliststring-selector"}),(0,i.kt)("inlineCode",{parentName:"a"},"AxeBuilder.exclude()"))," to exclude them from being scanned until you're able to fix the issues."),(0,i.kt)("p",null,"This is usually the simplest option, but it has some important downsides:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exclude()")," will exclude the specified elements ",(0,i.kt)("em",{parentName:"li"},"and all of their descendants"),". Avoid using it with components that contain many children."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exclude()")," will prevent ",(0,i.kt)("em",{parentName:"li"},"all")," rules from running against the specified elements, not just the rules corresponding to known issues.")),(0,i.kt)("p",null,"Here is an example of excluding one element from being scanned in one specific test:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'AxeResults accessibilityScanResults = new AxeBuilder(page)\n  .exclude(Arrays.asList("#element-with-known-issue"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n')),(0,i.kt)("p",null,"If the element in question is used repeatedly in many pages, consider ",(0,i.kt)("a",p({parentName:"p"},{href:"#using-a-test-fixture-for-common-axe-configuration"}),"using a test fixture")," to reuse the same ",(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder")," configuration across multiple tests."),(0,i.kt)("h3",p({},{id:"disabling-individual-scan-rules"}),"Disabling individual scan rules"),(0,i.kt)("p",null,"If your application contains many different pre-existing violations of a specific rule, you can use ",(0,i.kt)("a",p({parentName:"p"},{href:"https://github.com/dequelabs/axe-core-maven-html/blob/develop/playwright/README.md#axebuilderdisablerulesliststring-rules"}),(0,i.kt)("inlineCode",{parentName:"a"},"AxeBuilder.disableRules()"))," to temporarily disable individual rules until you're able to fix the issues."),(0,i.kt)("p",null,"You can find the rule IDs to pass to ",(0,i.kt)("inlineCode",{parentName:"p"},"disableRules()")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," property of the violations you want to suppress. A ",(0,i.kt)("a",p({parentName:"p"},{href:"https://github.com/dequelabs/axe-core/blob/master/doc/rule-descriptions.md"}),"complete list of axe's rules")," can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"axe-core"),"'s documentation."),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'AxeResults accessibilityScanResults = new AxeBuilder(page)\n  .disableRules(Arrays.asList("duplicate-id"))\n  .analyze();\n\nassertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n')),(0,i.kt)("h3",p({},{id:"using-violation-fingerprints-to-specific-known-issues"}),"Using violation fingerprints to specific known issues"),(0,i.kt)("p",null,"If you would like to allow for a more granular set of known issues, you can use the following pattern:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Perform an accessibility scan which is expected to find some known violations"),(0,i.kt)("li",{parentName:"ol"},'Convert the violations into "violation fingerprint" objects'),(0,i.kt)("li",{parentName:"ol"},"Assert that the set of fingerprints is equivalent to the expected ones")),(0,i.kt)("p",null,"This approach avoids the downsides of using ",(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder.exclude()")," at the cost of slightly more complexity and fragility."),(0,i.kt)("p",null,'Here is an example of using fingerprints based on only rule IDs and "target" selectors pointing to each violation:'),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'@Test\nshouldOnlyHaveAccessibilityViolationsMatchingKnownFingerprints() throws Exception {\n  page.navigate("https://your-site.com/");\n\n  AxeResults accessibilityScanResults = new AxeBuilder(page).analyze();\n\n  List<ViolationFingerprint> violationFingerprints = fingerprintsFromScanResults(accessibilityScanResults);\n          \n  assertEquals(Arrays.asList(\n    new ViolationFingerprint("aria-roles", "[span[role=\\"invalid\\"]]"),\n    new ViolationFingerprint("color-contrast", "[li:nth-child(2) > span]"),\n    new ViolationFingerprint("label", "[input]")\n  ), violationFingerprints);\n}\n\n// You can make your "fingerprint" as specific as you like. This one considers a violation to be\n// "the same" if it corresponds the same Axe rule on the same element.\n//\n// Using a record type makes it easy to compare fingerprints with assertEquals\npublic record ViolationFingerprint(String ruleId, String target) { }\n\npublic List<ViolationFingerprint> fingerprintsFromScanResults(AxeResults results) {\n  return results.getViolations().stream()\n    // Each violation refers to one rule and multiple "nodes" which violate it\n    .flatMap(violation -> violation.getNodes().stream()\n      .map(node -> new ViolationFingerprint(\n        violation.getId(),\n        // Each node contains a "target", which is a CSS selector that uniquely identifies it\n        // If the page involves iframes or shadow DOMs, it may be a chain of CSS selectors\n        node.getTarget().toString()\n      )))\n    .collect(Collectors.toList());\n}\n')),(0,i.kt)("h2",p({},{id:"using-a-test-fixture-for-common-axe-configuration"}),"Using a test fixture for common axe configuration"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",p({parentName:"p"},{href:"./test-runners#running-tests-in-parallel"}),(0,i.kt)("inlineCode",{parentName:"a"},"TestFixtures")," class")," is a good way to share common ",(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder")," configuration across many tests. Some scenarios where this might be useful include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Using a common set of rules among all of your tests"),(0,i.kt)("li",{parentName:"ul"},"Suppressing a known violation in a common element which appears in many different pages"),(0,i.kt)("li",{parentName:"ul"},"Attaching standalone accessibility reports consistently for many scans")),(0,i.kt)("p",null,"The following example demonstrates extending the ",(0,i.kt)("inlineCode",{parentName:"p"},"TestFixtures")," class from the ",(0,i.kt)("a",p({parentName:"p"},{href:"./test-runners#running-tests-in-parallel"}),"Test Runners example")," with a new fixture that contains some common ",(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder")," configuration."),(0,i.kt)("h3",p({},{id:"creating-a-fixture"}),"Creating a fixture"),(0,i.kt)("p",null,"This example fixture creates an ",(0,i.kt)("inlineCode",{parentName:"p"},"AxeBuilder")," object which is pre-configured with shared ",(0,i.kt)("inlineCode",{parentName:"p"},"withTags()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude()")," configuration."),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),"class AxeTestFixtures extends TestFixtures {\n  AxeBuilder makeAxeBuilder() {\n    return new AxeBuilder(page)\n      .withTags(['wcag2a', 'wcag2aa', 'wcag21a', 'wcag21aa'])\n      .exclude('#commonly-reused-element-with-known-issue');\n  }\n}\n")),(0,i.kt)("h3",p({},{id:"using-a-fixture"}),"Using a fixture"),(0,i.kt)("p",null,"To use the fixture, replace the earlier examples' ",(0,i.kt)("inlineCode",{parentName:"p"},"new AxeBuilder(page)")," with the newly defined ",(0,i.kt)("inlineCode",{parentName:"p"},"makeAxeBuilder")," fixture:"),(0,i.kt)("pre",null,(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),"public class HomepageTests extends AxeTestFixtures {\n  @Test\n  void exampleUsingCustomFixture() throws Exception {\n    page.navigate(\"https://your-site.com/\");\n\n    AxeResults accessibilityScanResults = makeAxeBuilder()\n      // Automatically uses the shared AxeBuilder configuration,\n      // but supports additional test-specific configuration too\n      .include('#specific-element-under-test')\n      .analyze();\n\n    assertEquals(Collections.emptyList(), accessibilityScanResults.getViolations());\n  }\n}\n")))}x.isMDXComponent=!0}}]);